apiVersion: v1
kind: ConfigMap
metadata:
  name: neutron-server-setup
data:
  neutron-server-init.sh: |
    #!/bin/bash
    set -e;
    service rsyslog restart;
    sleep 10;
    #export K8S_DEFAULT_GW_IP=$(ip route | awk '/default/ { print $3 }');
    export K8S_DEFAULT_GW_IP=$(ip route show 0.0.0.0/0 dev eth0 | awk '{print $3}');
    until ping -c 1 -W 1 $K8S_DEFAULT_GW_IP; do echo "gateway ping testing....."; sleep 1; done
    #export KRS_DEFAULT_GW_MAC=$(ip neigh | awk -v gw_ip="$K8S_DEFAULT_GW_IP" '$0~gw_ip {print $5}');
    export KRS_DEFAULT_GW_MAC=$(arp -n | grep "^$K8S_DEFAULT_GW_IP " | awk '{print $3}');
    if ! (lsmod | grep -q "^openvswitch "); then
      #insmod /lib/modules/$(uname -r)/kernel/net/openvswitch/openvswitch.ko;
      #until insmod $(find /lib/modules/ | grep "openvswitch.ko$" | tail -n 1); do echo "waiting for installing openvswitch kernel model....."; sleep 1; done
      until modprobe openvswitch;
      do
        echo "waiting for loading openvswitch kernel model.....";
        sleep 1;
      done;
    fi;
    echo "ok~~~~ openvswitch kernel module is ready~~!!!"
    #modprobe openvswitch;
    until (service openvswitch-switch status);
    do
      echo "waiting for openvswitch-switch service.....";
      service openvswitch-switch restart;
      sleep 5;
    done
    echo "ok~~~~ openvswitch-switch service is ready~~!!!"
    ip link set eth0 down;
    ip addr flush dev eth0;
    ip link set eth0 name phy-eth0;
    export K8S_PHY_ETH0_MAC=$(cat /sys/class/net/phy-eth0/address);
    ovs-vsctl add-br eth0;
    export K8S_BRIDGE_MAC=$(cat /sys/class/net/eth0/address);
    ovs-vsctl del-br eth0;
    ovs-vsctl add-br eth0 -- set bridge eth0 other-config:hwaddr="$K8S_PHY_ETH0_MAC";
    ip link set dev phy-eth0 address $K8S_BRIDGE_MAC;
    ovs-vsctl add-port eth0 phy-eth0;
    ip link set phy-eth0 up;
    ip link set eth0 up;
    ip addr add $MY_POD_IP/24 dev eth0;
    route add default gw $K8S_DEFAULT_GW_IP dev eth0;
    route add -net $(echo $MY_POD_IP | awk -F'.' '{print $1"."$2".0.0"}') netmask 255.255.0.0 gw $K8S_DEFAULT_GW_IP dev eth0;
    arp -s $K8S_DEFAULT_GW_IP $KRS_DEFAULT_GW_MAC;
    unset K8S_DEFAULT_GW_IP K8S_BRIDGE_MAC K8S_PHY_ETH0_MAC;
    if ! (lsmod | grep -q "^ebtables "); then
      #insmod /lib/modules/$(uname -r)/kernel/net/bridge/netfilter/ebtables.ko;
      #insmod $(find /lib/modules/ | grep "ebtables.ko$" | tail -n 1);
      until modprobe ebtables;
      do
        echo "waiting for loading ebtables kernel module.....";
        sleep 1;
      done
    fi;
    echo "ok~~~~ ebtables kernel module is ready~~!!!"
    #modprobe ebtables;
    if ! (lsmod | grep -q "^bridge "); then
      #insmod /lib/modules/$(uname -r)/kernel/net/bridge/bridge.ko
      #insmod $(find /lib/modules/ | grep "bridge.ko$" | tail -n 1);
      until modprobe bridge;
      do
        echo "waiting for loading bridge kernel module.....";
        sleep 1;
      done
    fi;
    echo "ok~~~~ bridge kernel module is ready~~!!!"
    #modprobe bridge;
    ovs-vsctl add-br br-ex;
    ovs-vsctl add-port eth0 patch-br-ex -- set Interface patch-br-ex type=patch options:peer=patch-eth0;
    ovs-vsctl add-port br-ex patch-eth0 -- set Interface patch-eth0 type=patch options:peer=patch-br-ex;
    ip link set br-ex up;
    sysctl -w net.ipv4.conf.default.rp_filter=0;
    sysctl -w net.ipv4.conf.all.rp_filter=0;
    sysctl -w net.ipv4.ip_forward=1;
    cp -a /etc/neutron /etc/neutron.default;
    cat /scripts/neutron.conf > /etc/neutron/neutron.conf;
    cat /scripts/ml2_conf.ini > /etc/neutron/plugins/ml2/ml2_conf.ini;
    #cat /scripts/linuxbridge_agent.ini > /etc/neutron/plugins/ml2/linuxbridge_agent.ini;
    cat /scripts/l3_agent.ini > /etc/neutron/l3_agent.ini;
    cat /scripts/dhcp_agent.ini > /etc/neutron/dhcp_agent.ini;
    cat /scripts/metadata_agent.ini > /etc/neutron/metadata_agent.ini;
    cat /scripts/neutron_lbaas.conf > /etc/neutron/neutron_lbaas.conf;
    cat /scripts/lbaas_agent.ini > /etc/neutron/lbaas_agent.ini;
    cat /scripts/openvswitch_agent.ini > /etc/neutron/plugins/ml2/openvswitch_agent.ini;
    sed -i "s/___K8S_NEUTRON_DB_PASS___/$K8S_NEUTRON_DB_PASS/g" /etc/neutron/neutron.conf;
    sed -i "s/___K8S_RABBITMQ_OPENSTACK_USER___/$K8S_RABBITMQ_OPENSTACK_USER/g" /etc/neutron/neutron.conf;
    sed -i "s/___K8S_RABBITMQ_OPENSTACK_PASS___/$K8S_RABBITMQ_OPENSTACK_PASS/g" /etc/neutron/neutron.conf;
    sed -i "s/___K8S_KEYSTONE_USER_NEUTRON_PASS___/$K8S_KEYSTONE_USER_NEUTRON_PASS/g" /etc/neutron/neutron.conf;
    sed -i "s/___K8S_KEYSTONE_USER_NOVA_PASS___/$K8S_KEYSTONE_USER_NOVA_PASS/g" /etc/neutron/neutron.conf;
    sed -i "s/___K8S_METADATA_PROXY_SHARED_SECRET___/$K8S_METADATA_PROXY_SHARED_SECRET/g" /etc/neutron/metadata_agent.ini;
    #sed -i "s/OVERLAY_INTERFACE_IP_ADDRESS/$MY_POD_IP/g" /etc/neutron/plugins/ml2/linuxbridge_agent.ini;
    sed -i "s/OVS_LOCAL_IP/$MY_POD_IP/g" /etc/neutron/plugins/ml2/openvswitch_agent.ini;
    ln -sf /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini;
    cat > /root/admin-openrc << EOF
    export OS_PROJECT_DOMAIN_NAME=default
    export OS_USER_DOMAIN_NAME=default
    export OS_PROJECT_NAME=admin
    export OS_USERNAME=admin
    export OS_PASSWORD=$K8S_KEYSTONE_USER_ADMIN_PASS
    export OS_AUTH_URL=http://keystone:35357/v3
    export OS_IDENTITY_API_VERSION=3
    export OS_IMAGE_API_VERSION=2
    EOF
    cat > /root/demo-openrc << EOF
    export OS_PROJECT_DOMAIN_NAME=Default
    export OS_USER_DOMAIN_NAME=Default
    export OS_PROJECT_NAME=demo
    export OS_USERNAME=demo
    export OS_PASSWORD=$K8S_KEYSTONE_USER_DEMO_PASS
    export OS_AUTH_URL=http://keystone:5000/v3
    export OS_IDENTITY_API_VERSION=3
    export OS_IMAGE_API_VERSION=2
    EOF
    source /root/admin-openrc
    exist_neutron_db=$(mysql -s -N -q -A --connect-timeout=10 -hhaproxy-galera -uroot -p$MYSQL_ROOT_PASSWORD -e "SHOW DATABASES LIKE 'neutron';" 2>/dev/null)
    if [ "X$exist_neutron_db" == "X" ]; then
      mysql -hhaproxy-galera -uroot -p$MYSQL_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS neutron"
      mysql -hhaproxy-galera -uroot -p$MYSQL_ROOT_PASSWORD -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '$K8S_NEUTRON_DB_PASS'"
      mysql -hhaproxy-galera -uroot -p$MYSQL_ROOT_PASSWORD -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '$K8S_NEUTRON_DB_PASS'"
      if ! openstack user list -f value -c Name | grep neutron > /dev/null; then
        openstack user create --domain default --password $K8S_KEYSTONE_USER_NEUTRON_PASS neutron 2>/dev/null
      fi
      openstack role add --project service --user neutron admin
      if ! openstack service list -f value -c Name | grep "^neutron$" > /dev/null; then
        openstack service create --name neutron --description "OpenStack Networking" network;
      fi
      if ! openstack endpoint list --service neutron -f value -c "Service Name" -c "Service Type" -c "Interface" | grep "neutron network public" > /dev/null; then
        openstack endpoint create --region RegionOne network public http://neutron-server:9696
      fi
      if ! openstack endpoint list --service neutron -f value -c "Service Name" -c "Service Type" -c "Interface" | grep "neutron network internal" > /dev/null; then
        openstack endpoint create --region RegionOne network internal http://neutron-server:9696
      fi
      if ! openstack endpoint list --service neutron -f value -c "Service Name" -c "Service Type" -c "Interface" | grep "neutron network admin" > /dev/null; then
        openstack endpoint create --region RegionOne network admin http://neutron-server:9696
      fi
      su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
    fi
    service neutron-server restart
    #service neutron-linuxbridge-agent restart
    service neutron-openvswitch-agent restart
    service neutron-dhcp-agent restart
    service neutron-metadata-agent restart
    service neutron-l3-agent restart
    service neutron-metering-agent restart
    service neutron-lbaasv2-agent restart
    #service neutron-ovs-cleanup restart
    sleep 5;
    until neutron ext-list; do echo "(1) waiting for service response....."; sleep 5; done
    echo "(1) ok~~~~ service is ready~~!!!"
    if [ "X$exist_neutron_db" == "X" ]; then
      neutron net-create ext-net --router:external --provider:physical_network external --provider:network_type flat
      neutron subnet-create ext-net --name ext-net --allocation-pool start=$K8S_EXT_SUBNET_POOL_START,end=$K8S_EXT_SUBNET_POOL_END --disable-dhcp --gateway $K8S_EXT_SUBNET_GW $K8S_EXT_SUBNET_CIDR
      neutron net-create demo-net --tenant-id `openstack project show demo -f value -c id` --provider:network_type vxlan
      source /root/demo-openrc
      neutron subnet-create demo-net --name private-subnet --gateway $K8S_DEMO_SUBNET_GW $K8S_DEMO_SUBNET_CIDR --dns-nameserver $K8S_DEMO_SUBNET_DNS
      neutron router-create demo-router
      neutron router-interface-add demo-router private-subnet
      neutron router-gateway-set demo-router ext-net
      source /root/admin-openrc
    fi
    until (echo $NEUTRON_SERVICES | grep -q "ext-net") && (echo $NEUTRON_SERVICES | grep -q "demo-net")
    do
      echo "(2) waiting for service response....."
      NEUTRON_SERVICES=$(neutron net-list -f value -c "name"  || true)
      sleep 5
    done
    echo "(2) ok~~~~ service is ready~~!!!"
    ovs-vsctl show;
    neutron net-list;
    neutron subnet-list;
    touch /.setup_completed
    tail -F /var/log/syslog /var/log/neutron/*

  neutron.conf: |
    [DEFAULT]
    core_plugin = ml2
    #service_plugins = router
    service_plugins = neutron.services.l3_router.l3_router_plugin.L3RouterPlugin,neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2,metering
    router_distributed = false
    l3_ha = true
    allow_automatic_l3agent_failover = true
    max_l3_agents_per_router = 3
    min_l3_agents_per_router = 1
    dhcp_agents_per_network = 3
    allow_overlapping_ips = true
    transport_url = rabbit://___K8S_RABBITMQ_OPENSTACK_USER___:___K8S_RABBITMQ_OPENSTACK_PASS___@rabbitmq-0.rabbitmq,___K8S_RABBITMQ_OPENSTACK_USER___:___K8S_RABBITMQ_OPENSTACK_PASS___@rabbitmq-1.rabbitmq,___K8S_RABBITMQ_OPENSTACK_USER___:___K8S_RABBITMQ_OPENSTACK_PASS___@rabbitmq-2.rabbitmq
    auth_strategy = keystone
    notify_nova_on_port_status_changes = true
    notify_nova_on_port_data_changes = true
    global_physnet_mtu = 1400
    advertise_mtu = true
    [agent]
    root_helper = sudo /usr/bin/neutron-rootwrap /etc/neutron/rootwrap.conf
    [cors]
    [cors.subdomain]
    [database]
    connection = mysql+pymysql://neutron:___K8S_NEUTRON_DB_PASS___@haproxy-galera/neutron
    [keystone_authtoken]
    auth_uri = http://keystone:5000/v3
    auth_url = http://keystone:35357/v3
    #memcached_servers = memcached:11211
    memcached_servers = memcached-0.memcached:11211,memcached-1.memcached:11211,memcached-2.memcached:11211
    auth_type = password
    project_domain_name = default
    user_domain_name = default
    project_name = service
    username = neutron
    password = ___K8S_KEYSTONE_USER_NEUTRON_PASS___
    [matchmaker_redis]
    [nova]
    auth_url = http://keystone:35357
    auth_type = password
    project_domain_name = default
    user_domain_name = default
    region_name = RegionOne
    project_name = service
    username = nova
    password = ___K8S_KEYSTONE_USER_NOVA_PASS___
    [oslo_concurrency]
    [oslo_messaging_amqp]
    [oslo_messaging_notifications]
    driver = messagingv2
    transport_url = rabbit://___K8S_RABBITMQ_OPENSTACK_USER___:___K8S_RABBITMQ_OPENSTACK_PASS___@rabbitmq-0.rabbitmq,___K8S_RABBITMQ_OPENSTACK_USER___:___K8S_RABBITMQ_OPENSTACK_PASS___@rabbitmq-1.rabbitmq,___K8S_RABBITMQ_OPENSTACK_USER___:___K8S_RABBITMQ_OPENSTACK_PASS___@rabbitmq-2.rabbitmq
    [oslo_messaging_rabbit]
    [oslo_messaging_zmq]
    [oslo_middleware]
    [oslo_policy]
    [qos]
    [quotas]
    [ssl]

  ml2_conf.ini: |
    [DEFAULT]
    [ml2]
    #type_drivers = flat,vlan,vxlan
    type_drivers = flat,vxlan
    tenant_network_types = vxlan
    #mechanism_drivers = linuxbridge,l2population
    mechanism_drivers = openvswitch,l2population
    extension_drivers = port_security
    path_mtu = 1400
    [ml2_type_flat]
    flat_networks = external
    [ml2_type_geneve]
    [ml2_type_gre]
    [ml2_type_vlan]
    [ml2_type_vxlan]
    vni_ranges = 1:1000
    [securitygroup]
    firewall_driver = iptables_hybrid

#  linuxbridge_agent.ini: |
#    [DEFAULT]
#    [agent]
#    [linux_bridge]
#    physical_interface_mappings = provider:eth0
#    [securitygroup]
#    enable_security_group = true
#    firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
#    [vxlan]
#    enable_vxlan = true
#    local_ip = OVERLAY_INTERFACE_IP_ADDRESS
#    l2_population = true

  l3_agent.ini: |
    [DEFAULT]
    #interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
    interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
    external_network_bridge  =
    #agent_mode = dvr_snat
    [AGENT]

  dhcp_agent.ini: |
    [DEFAULT]
    #interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
    interface_driver = openvswitch
    dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
    #enable_isolated_metadata = true
    enable_isolated_metadata = true
    force_metadata = true
    [AGENT]

  metadata_agent.ini: |
    [DEFAULT]
    nova_metadata_ip = nova-server
    metadata_proxy_shared_secret = ___K8S_METADATA_PROXY_SHARED_SECRET___
    [AGENT]
    [cache]

  neutron_lbaas.conf: |
    [DEFAULT]
    [certificates]
    [quotas]
    [service_auth]
    [service_providers]
    service_provider = LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default

  lbaas_agent.ini: |
    [DEFAULT]
    interface_driver = openvswitch

  openvswitch_agent.ini: |
    [DEFAULT]
    [agent]
    tunnel_types = vxlan
    enable_distributed_routing = false
    l2_population = true
    arp_responder = true
    [ovs]
    local_ip = OVS_LOCAL_IP
    bridge_mappings = external:br-ex
    [securitygroup]
    firewall_driver = iptables_hybrid
