apiVersion: v1
kind: ConfigMap
metadata:
  name: ovs-setup
data:
  ovs-init.sh: |
    #!/bin/bash
    set -e
    CTAG="/.ovs_setup_completed"
    if [ -e $CTAG ]; then
      echo "Setting OVS was completed already~~!!"
      exit 0
    fi
    ## OVS Networking - BEGIN
    #export K8S_DEFAULT_GW_IP=$(ip route | awk '/default/ { print $3 }');
    export K8S_DEFAULT_GW_IP=$(ip route show 0.0.0.0/0 dev eth0 | awk '{print $3}');
    until ping -c 1 -W 1 $K8S_DEFAULT_GW_IP; do echo "gateway ping testing....."; sleep 1; done
    #export KRS_DEFAULT_GW_MAC=$(ip neigh | awk -v gw_ip="$K8S_DEFAULT_GW_IP" '$0~gw_ip {print $5}');
    export KRS_DEFAULT_GW_MAC=$(arp -n | grep "^$K8S_DEFAULT_GW_IP " | awk '{print $3}');
    if ! (lsmod | grep -q "^openvswitch "); then
      #insmod /lib/modules/$(uname -r)/kernel/net/openvswitch/openvswitch.ko;
      #until insmod $(find /lib/modules/ | grep "openvswitch.ko$" | tail -n 1); do echo "waiting for installing openvswitch kernel model....."; sleep 1; done
      until modprobe openvswitch;
      do
        echo "waiting for loading openvswitch kernel model.....";
        sleep 1;
      done;
    fi;
    echo "ok~~~~ openvswitch kernel module is ready~~!!!"
    #modprobe openvswitch;
    until (service openvswitch-switch status);
    do
      echo "waiting for openvswitch-switch service.....";
      service openvswitch-switch restart;
      sleep 5;
    done
    echo "ok~~~~ openvswitch-switch service is ready~~!!!"
    ip link set eth0 down;
    ip addr flush dev eth0;
    ip link set eth0 name phy-eth0;
    export K8S_PHY_ETH0_MAC=$(cat /sys/class/net/phy-eth0/address);
    ovs-vsctl add-br eth0;
    export K8S_BRIDGE_MAC=$(cat /sys/class/net/eth0/address);
    ovs-vsctl del-br eth0;
    ovs-vsctl add-br eth0 -- set bridge eth0 other-config:hwaddr="$K8S_PHY_ETH0_MAC";
    ip link set dev phy-eth0 address $K8S_BRIDGE_MAC;
    ovs-vsctl add-port eth0 phy-eth0;
    ip link set phy-eth0 up;
    ip link set eth0 up;
    ip addr add $MY_POD_IP/24 dev eth0;
    route add default gw $K8S_DEFAULT_GW_IP dev eth0;
    route add -net $(echo $MY_POD_IP | awk -F'.' '{print $1"."$2".0.0"}') netmask 255.255.0.0 gw $K8S_DEFAULT_GW_IP dev eth0;
    arp -s $K8S_DEFAULT_GW_IP $KRS_DEFAULT_GW_MAC;
    unset K8S_DEFAULT_GW_IP K8S_BRIDGE_MAC K8S_PHY_ETH0_MAC;
    if ! (lsmod | grep -q "^ebtables "); then
      #insmod /lib/modules/$(uname -r)/kernel/net/bridge/netfilter/ebtables.ko;
      #insmod $(find /lib/modules/ | grep "ebtables.ko$" | tail -n 1);
      until modprobe ebtables;
      do
        echo "waiting for loading ebtables kernel model.....";
        sleep 1;
      done
    fi;
    echo "ok~~~~ ebtables kernel module is ready~~!!!"
    #modprobe ebtables;
    ovs-vsctl add-br br-ex;
    ovs-vsctl add-port eth0 patch-br-ex -- set Interface patch-br-ex type=patch options:peer=patch-eth0;
    ovs-vsctl add-port br-ex patch-eth0 -- set Interface patch-eth0 type=patch options:peer=patch-br-ex;
    ip link set br-ex up mtu 1350;
    sysctl -w net.ipv4.conf.default.rp_filter=0;
    sysctl -w net.ipv4.conf.all.rp_filter=0;
    sysctl -w net.ipv4.ip_forward=1;
    touch $CTAG
    chattr +i $CTAG
    ## OVS Networking - END
