# Reference: (N/A)

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: heat-pdb
spec:
  selector:
    matchLabels:
      app: heat
  minAvailable: 1
  #maxUnavailable: 2

---

apiVersion: v1
kind: Service
metadata:
  name: heat
  labels:
    app: heat
spec:
  ports:
  - name: heat-api
    port: 8004
    targetPort: 8004
  - name: heat-cfn-api
    port: 8000
    targetPort: 8000
  #sessionAffinity: ClientIP
  clusterIP: None
  #type: NodePort # Or LoadBalancer in production w/ proper security
  #type: LoadBalancer
  selector:
    app: heat

---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: heat
  labels:
    app: heat
spec:
  serviceName: "heat"
  replicas: 1
  podManagementPolicy: OrderedReady
  #podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: heat
  template:
    metadata:
      labels:
        app: heat
    spec:
      terminationGracePeriodSeconds: 10
      affinity:
         podAntiAffinity:
           requiredDuringSchedulingIgnoredDuringExecution:
           - labelSelector:
               matchExpressions:
               - key: "app"
                 operator: In
                 values:
                 - heat
             topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        controller: "true"
      initContainers:
      - name: wait1
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-haproxy.sh"]
      - name: wait2
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-memcached.sh"]
      - name: wait3
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-rabbitmq.sh"]
      - name: wait4
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-keystone.sh"]
      - name: wait5
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-ceilometer-central.sh"]
      - name: wait6
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-aodh.sh"]
      #- name: wait7
      #  #imagePullPolicy: Always
      #  imagePullPolicy: IfNotPresent
      #  image: call518/oaas-init-container:1.0
      #  envFrom:
      #    - configMapRef:
      #        name: env-common
      #  volumeMounts:
      #  - name: init-container-scripts
      #    mountPath: /init-container-scripts
      #  command: ["/bin/bash","-c","/init-container-scripts/init-check-neutron-server.sh"]
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "heat"
      #- ip: "192.168.0.150"
      #  hostnames:
      #  - "nfs-server"
      containers:
        - name: heat
          image: call518/oaas-queens:latest
          #imagePullPolicy: Always
          imagePullPolicy: IfNotPresent
          #securityContext:
          #  privileged: true
          #  capabilities:
          #    add:
          #    - CAP_SYS_ADMIN
          envFrom:
            - configMapRef:
                name: env-common
          command: ["/scripts/heat-init.sh"]
          ports:
            - containerPort: 8004
            - containerPort: 8000
          volumeMounts:
          - name: openstack-openrc
            mountPath: /root/openrc
          - name: heat-setup
            mountPath: /scripts
          readinessProbe:
            exec:
              command:
              - /check-init.sh
            initialDelaySeconds: 60
            periodSeconds: 5
            #timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 1
          #livenessProbe:
          #  exec:
          #    command:
          #    - /healthcheck.sh
          #    - --liveness
          #livenessProbe:
          #  tcpSocket:
          #    port: 8042
          #  initialDelaySeconds: 120
          #  periodSeconds: 10
      volumes:
      - name: init-container-scripts
        configMap:
          name: init-container-scripts
          defaultMode: 0755
      - name: heat-setup
        configMap:
          name: heat-setup
          defaultMode: 0755
      - name: openstack-openrc
        configMap:
          name: openstack-openrc
          defaultMode: 0755
