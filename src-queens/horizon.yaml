# Reference: (N/A)

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: horizon-pdb
spec:
  selector:
    matchLabels:
      app: horizon
  minAvailable: 1
  #maxUnavailable: 2

---

apiVersion: v1
kind: Service
metadata:
  name: horizon
  labels:
    app: horizon
spec:
  ports:
  - name: horizon
    port: 80
    targetPort: 80
    nodePort: 30080
    protocol: TCP
  #sessionAffinity: ClientIP
  #clusterIP: None
  type: NodePort # Or LoadBalancer in production w/ proper security
  #type: LoadBalancer
  selector:
    app: horizon

---

#apiVersion: apps/v1beta1
#kind: StatefulSet
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: horizon
  labels:
    app: horizon
spec:
  #serviceName: "horizon"
  replicas: 1
  #podManagementPolicy: OrderedReady
  ##podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: horizon
  template:
    metadata:
      labels:
        app: horizon
    spec:
      terminationGracePeriodSeconds: 10
      affinity:
         podAntiAffinity:
           requiredDuringSchedulingIgnoredDuringExecution:
           - labelSelector:
               matchExpressions:
               - key: "app"
                 operator: In
                 values:
                 - horizon
             topologyKey: "kubernetes.io/hostname"
      nodeSelector:
        controller: "true"
      initContainers:
      - name: wait1
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-haproxy.sh"]
      - name: wait2
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-memcached.sh"]
      - name: wait3
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-keystone.sh"]
      - name: wait4
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-glance.sh"]
      - name: wait5
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-cinder.sh"]
      - name: wait6
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-ceilometer-central.sh"]
      - name: wait7
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-aodh.sh"]
      - name: wait8
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-heat.sh"]
      - name: wait9
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-neutron-server.sh"]
      - name: wait10
        #imagePullPolicy: Always
        imagePullPolicy: IfNotPresent
        image: call518/oaas-init-container:1.0
        envFrom:
          - configMapRef:
              name: env-common
        volumeMounts:
        - name: init-container-scripts
          mountPath: /init-container-scripts
        command: ["/bin/bash","-c","/init-container-scripts/init-check-nova-server.sh"]
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "horizon"
      containers:
        - name: horizon
          #image: call518/oaas-horizon
          image: call518/oaas-queens:latest
          #imagePullPolicy: Always
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: env-common
          command: ["/scripts/horizon-init.sh"]
          ports:
            - containerPort: 80
              #hostPort: 80
          volumeMounts:
          - name: horizon-setup
            mountPath: /scripts
          readinessProbe:
            exec:
              command:
              - /check-init.sh
            initialDelaySeconds: 10
            periodSeconds: 5
            #timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 1
          #livenessProbe:
          #  exec:
          #    command:
          #    - /healthcheck.sh
          #    - --liveness
          ##livenessProbe:
          ##  tcpSocket:
          ##    port: 5000
          ##  initialDelaySeconds: 5
          ##  periodSeconds: 10
      volumes:
      - name: init-container-scripts
        configMap:
          name: init-container-scripts
          defaultMode: 0755
      - name: horizon-setup
        configMap:
          name: horizon-setup
          defaultMode: 0755
